import numpy as npimport glob, os, sysimport mathimport copyimport ot# fix random seed to obtain comparable results# np.random.seed(1)N = 1200# no. of particles## generate reference solution for FDAD checkxmin = 0.0xmax = 1.0# uniform initial datax_ref = np.reshape(xmin + (xmax-xmin) * np.random.rand(N), (N, 1))y_ref = np.reshape(xmin + (xmax-xmin) * np.random.rand(N), (N, 1))# save reference solutionnp.savetxt('x_ref.txt', x_ref)np.savetxt('y_ref.txt', y_ref)t = 0.0 # initialize time variabledt = 2. # time stepT = 10000. # terminal timechi = 0.2 # anisotropy parameterstop = 0.05 # variable for stopping criteriongamma1 = 1. # prefactor first part cost functionalgamma2 = 0.00001 # prefactor theta cost functionalgamma3 = 0.001 # prefactor eta cost functionalalpha = 270.0beta = 0.1eR = 100.eA = 95.gam = 35.# argument 1 fixes the controls: choose your settingif int(sys.argv[1]) == 1:    # control parameter    fak_theta = 0.4  # initial value for optimization #fak_theta*np.pi    fak_theta_for = 0.6  # value for artificial data #fak_theta_for*np.pi    fak_theta_ref = 0.5  # reference value in cost functional #fak_theta_ref*np.pi    eta = 0.98    # initial value for optimization    eta_for = 1.   # value for artificial data    eta_ref = 1.   # reference value in cost functionalif int(sys.argv[1]) == 2:    # control parameter    fak_theta = 0.3  # initial value for optimization    fak_theta_for = 0.7  # value for artificial data    fak_theta_ref = 0.5  # reference value in cost functional    eta = 0.98    # initial value for optimization    eta_for = 1.   # value for artificial data    eta_ref = 1.   # reference value in cost functionalif int(sys.argv[1]) == 3:    # control parameter    fak_theta = 0.1  # initial value for optimization    fak_theta_for = 0.3  # value for artificial data    fak_theta_ref = 0.5  # reference value in cost functional    eta = 0.98    # initial value for optimization    eta_for = 1.   # value for artificial data    eta_ref = 1.   # reference value in cost functionalif int(sys.argv[1]) == 4:    # control parameter    fak_theta = 0.4  # initial value for optimization    fak_theta_for = 0.6  # value for artificial data    fak_theta_ref = 0.5  # reference value in cost functional    eta = 0.9    # initial value for optimization    eta_for = 1.1   # value for artificial data    eta_ref = 1.   # reference value in cost functionalif int(sys.argv[1]) == 5:    # control parameter    fak_theta = 0.4  # initial value for optimization    fak_theta_for = 0.6  # value for artificial data    fak_theta_ref = 0.5  # reference value in cost functional    eta = 0.98    # initial value for optimization    eta_for = 1.05   # value for artificial data    eta_ref = 1.   # reference value in cost functionalif int(sys.argv[1]) == 6:    # control parameter    fak_theta = 0.4  # initial value for optimization    fak_theta_for = 0.6  # value for artificial data    fak_theta_ref = 0.5  # reference value in cost functional    eta = 0.98    # initial value for optimization    eta_for = 0.95   # value for artificial data    eta_ref = 1.   # reference value in cost functionalif int(sys.argv[1]) == 7:    # control parameter    fak_theta = 0.1  # initial value for optimization    fak_theta_for = 0.65  # value for artificial data    fak_theta_ref = 0.5  # reference value in cost functional    eta = 0.98    # initial value for optimization    eta_for = 0.95   # value for artificial data    eta_ref = 1.   # reference value in cost functionalif int(sys.argv[1]) == 8:    # control parameter    fak_theta = 0.0  # initial value for optimization    fak_theta_for = 0.75  # value for artificial data    fak_theta_ref = 0.5  # reference value in cost functional    eta = 0.98    # initial value for optimization    eta_for = 0.95   # value for artificial data    eta_ref = 1.   # reference value in cost functionalif int(sys.argv[1]) == 9:    # control parameter    fak_theta = 0.0  # initial value for optimization    fak_theta_for = 0.75  # value for artificial data    fak_theta_ref = 0.5  # reference value in cost functional    eta = 0.98   # initial value for optimization    eta_for = 1.05   # value for artificial data    eta_ref = 1.   # reference value in cost functionalif int(sys.argv[1]) == 10:    # control parameter    fak_theta = 0.2  # initial value for optimization    fak_theta_for = 0.4  # value for artificial data    fak_theta_ref = 0.5  # reference value in cost functional    eta = 0.98    # initial value for optimization    eta_for = 0.9   # value for artificial data    eta_ref = 1.   # reference value in cost functionalif int(sys.argv[1]) == 11:    # control parameter    fak_theta = 0.8  # initial value for optimization    fak_theta_for = 0.6  # value for artificial data    fak_theta_ref = 0.5  # reference value in cost functional    eta = 0.98    # initial value for optimization    eta_for = 0.9   # value for artificial data    eta_ref = 1.   # reference value in cost functionalif int(sys.argv[1]) == 12:    # control parameter    fak_theta = 0.8  # initial value for optimization    fak_theta_for = 0.3  # value for artificial data    fak_theta_ref = 0.5  # reference value in cost functional    eta = 0.98    # initial value for optimization    eta_for = 0.9   # value for artificial data    eta_ref = 1.   # reference value in cost functionalif int(sys.argv[1]) == 13:    # control parameter    fak_theta = 0.8  # initial value for optimization    fak_theta_for = 0.0  # value for artificial data    fak_theta_ref = 0.5  # reference value in cost functional    eta = 0.98    # initial value for optimization    eta_for = 0.9   # value for artificial data    eta_ref = 1.   # reference value in cost functionalif int(sys.argv[1]) == 14:    # control parameter    fak_theta = 0.8  # initial value for optimization    fak_theta_for = 0.7  # value for artificial data    fak_theta_ref = 0.5  # reference value in cost functional    eta = 0.98    # initial value for optimization    eta_for = 0.9   # value for artificial data    eta_ref = 1.   # reference value in cost functionalif int(sys.argv[1]) == 15:    # control parameter    fak_theta = 1.  # initial value for optimization    fak_theta_for = 0.  # value for artificial data    fak_theta_ref = 0.5  # reference value in cost functional    eta = 0.98   # initial value for optimization    eta_for = 0.95   # value for artificial data    eta_ref = 1.   # reference value in cost functionalif int(sys.argv[1]) == 16:    # control parameter    fak_theta = 0.  # initial value for optimization    fak_theta_for = 0.5  # value for artificial data    fak_theta_ref = 0.5  # reference value in cost functional    eta = 0.98    # initial value for optimization    eta_for = 0.95   # value for artificial data    eta_ref = 1.   # reference value in cost functionaltheta = fak_theta*np.pi  # initial value for optimizationtheta_for = fak_theta_for*np.pi  # value for artificial datatheta_ref = fak_theta_ref*np.pi  # reference value in cost functional# initial conditionsx = x_ref.copy()y = y_ref.copy()# bool for saving plotsplot = True# matrices needed for vectorization in forward and adjointO1N = np.ones((1, N))ON1 = np.ones((N, 1))# folder for resultspath = "./data/parameters_gamma1{0}gamma2{1}gamma3{2}T{3}dt{4}chi{5}theta_ref{6}theta_for{7}eta_ref{8}eta_for{9}/".format(gamma1,gamma2,gamma3,T,dt,chi,fak_theta_ref,fak_theta_for,eta_ref,eta_for)os.system('mkdir ' + path)# save this file in output folder to remember the parameter settingsos.system('cp init.py '+path+'init.txt')